services:
  ag_rtc_egress:
    # Development image built from Dockerfile.debug
    image: ag_rtc_egress:debug
    container_name: rtc-egress-service-debug
    depends_on:
      - redis
      - web_recorder
    ports:
      - "8080:8080"    # API port
      - "8182:8182"    # Health check port
      - "3000:3000"    # Web interface port
    volumes:
      # Mount your local config file
      - ../../config/egress_config.yaml:/opt/rtc_egress/config/egress_config.yaml:ro
      # Mount directories for recordings and snapshots
      - ../../recordings:/recordings
      - ../../snapshots:/snapshots
      - ../../logs:/var/log/rtc_egress
    environment:
      # Redis Configuration (internal to this compose stack)
      - REDIS_ADDR=redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}

      # Agora Configuration
      - AGORA_APP_ID=${AGORA_APP_ID:-}
      - AGORA_ACCESS_TOKEN=${AGORA_ACCESS_TOKEN:-}
      - AGORA_CHANNEL_NAME=${AGORA_CHANNEL_NAME:-}

      # Server Configuration  
      - GIN_MODE=debug
      - API_PORT=8080
      - HEALTH_PORT=8182

      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8182/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    networks:
      - rtc_egress_network

  redis:
    image: redis:latest
    container_name: redis-server
    restart: unless-stopped
    ports:
      - "6379:6379"  # Map host port 6379 to container port 6379
    command: |
      redis-server 
      --protected-mode no 
      --bind 0.0.0.0 
      --port 6379
      --io-threads 4
      --io-threads-do-reads yes
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./logs:/var/log/redis
    environment:
      - REDIS_REPLICATION_MODE=master
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    sysctls:
      - net.core.somaxconn=65535
    ulimits:
      memlock: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - rtc_egress_network

  web_recorder:
    # Agora Web Recorder Engine
    image: hub-master.agoralab.co/uap/cloud_recording/cloud_recording-web_recorder_engine:test_20250818024350_v2.13.8
    container_name: web-recorder-engine
    restart: unless-stopped
    ports:
      - "8001:8001"    # RESTful API port
      - "8002:8002"    # Probe port
    volumes:
      # Mount upload directory - replace with your local path
      - ./web_recordings:/opt2
      - ./logs:/var/log/web_recorder
    command: ["/usr/src/cloud_recording/run_default.sh", "--daemon", "--restful", "8001", "--probe-port", "8002"]
    environment:
      - LOG_LEVEL=info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # Web recorder takes longer to start
    # Allocate 2GB shared memory as per your requirements
    shm_size: "2g"
    networks:
      - rtc_egress_network

  # REQUIRED: Flexible Recorder service handles web recording tasks
  flexible-recorder:
    build:
      context: ../../
      dockerfile: cmd/flexible_recorder/Dockerfile
    container_name: flexible-recorder-service
    depends_on:
      - redis
      - web_recorder
    ports:
      - "8183:8183"    # Health check port (matches flexible-recorder)
    volumes:
      - ../../config/flexible_recorder_config.yaml:/opt/config/flexible_recorder_config.yaml:ro
      - ./logs:/var/log/flexible-recorder
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
      - AGORA_APP_ID=${AGORA_APP_ID:-}
      - WEB_RECORDER_BASE_URL=http://web_recorder:8001
      - WEB_RECORDER_AUTH_TOKEN=${WEB_RECORDER_AUTH_TOKEN:-}
      - SERVER_REGION=${SERVER_REGION:-}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8183/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - rtc_egress_network

volumes:
  redis_data:
    driver: local

networks:
  rtc_egress_network:
    name: rtc-egress-dev-network
    driver: bridge
