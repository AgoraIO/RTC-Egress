# Horizontal Pod Autoscaler for Egress Service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: egress-hpa
  namespace: rtc-egress
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: egress
  minReplicas: 3
  maxReplicas: 10  # Your requirement: up to 10 egress pods
  metrics:
  # Scale based on CPU utilization
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  # Scale based on memory utilization
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  # Scale based on active tasks (if you expose this metric)
  - type: Pods
    pods:
      metric:
        name: active_tasks_per_pod
      target:
        type: AverageValue
        averageValue: "20"  # Scale when average active tasks per pod > 20
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60  # Wait 1 minute before scaling up
      policies:
      - type: Percent
        value: 50  # Scale up by 50% at a time
        periodSeconds: 60
      - type: Pods
        value: 2   # Or add 2 pods at a time (whichever is smaller)
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300  # Wait 5 minutes before scaling down
      policies:
      - type: Percent
        value: 25  # Scale down by 25% at a time
        periodSeconds: 60
      - type: Pods
        value: 1   # Or remove 1 pod at a time (whichever is smaller)
        periodSeconds: 60
---
# Horizontal Pod Autoscaler for Webhook Notifier
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: webhook-notifier-hpa
  namespace: rtc-egress
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: webhook-notifier
  minReplicas: 2
  maxReplicas: 4   # Your requirement: up to 4 webhook_notifier pods
  metrics:
  # Scale based on CPU utilization
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  # Scale based on memory utilization
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  # Scale based on Redis connection count or notification rate (if exposed)
  - type: Pods
    pods:
      metric:
        name: pending_notifications_per_pod
      target:
        type: AverageValue
        averageValue: "100"  # Scale when pending notifications per pod > 100
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 30  # Faster scaling for notifications
      policies:
      - type: Percent
        value: 100  # Double the pods when scaling up
        periodSeconds: 30
      - type: Pods
        value: 1    # Or add 1 pod at a time
        periodSeconds: 30
    scaleDown:
      stabilizationWindowSeconds: 180  # Wait 3 minutes before scaling down
      policies:
      - type: Percent
        value: 50   # Scale down by 50% at a time
        periodSeconds: 60
---
# NOTE: No HPA for flexible-recorder - it maintains fixed 6 replicas
# This is intentional based on your requirement for fixed flexible-recorder count
# The flexible-recorder deployment in 05-web-recorder-deployment.yaml has replicas: 6