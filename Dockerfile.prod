# Production Dockerfile - Build stripped binaries (no symbols, no source code)
FROM ubuntu:24.04 AS builder

# Set timezone and avoid interactive prompts during build
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Install build dependencies
RUN sed -i 's|http://archive.ubuntu.com|https://archive.ubuntu.com|g' /etc/apt/sources.list && \
    apt-get update && apt-get install -y \
    build-essential \
    cmake \
    curl \
    pkg-config \
    git \
    ca-certificates \
    libssl-dev \
    libavcodec-dev \
    libavformat-dev \
    libavutil-dev \
    libswscale-dev \
    libswresample-dev \
    libyaml-cpp-dev \
    golang-go \
    binutils \
    && rm -rf /var/lib/apt/lists/*

# Create build directory
WORKDIR /build

# Copy only build-required files
COPY CMakeLists.txt ./
COPY build.sh ./
COPY prettifier.sh ./
COPY src/ ./src/
COPY cmd/ ./cmd/
COPY pkg/ ./pkg/
COPY go.mod ./
COPY go.sum ./
COPY config/ ./config/

# Build the application (no prettifier for CI)
RUN ./build.sh ci

# Strip debug symbols from binaries for production
RUN find bin/ -type f -executable -exec strip {} \;

# Production runtime stage
FROM ubuntu:24.04

# Set timezone and avoid interactive prompts
ENV TZ=UTC
ENV DEBIAN_FRONTEND=noninteractive
ENV GIN_MODE=release

# Install runtime dependencies only
RUN sed -i 's|http://archive.ubuntu.com|https://archive.ubuntu.com|g' /etc/apt/sources.list && \
    apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    ffmpeg \
    libavcodec60 \
    libavformat60 \
    libavutil58 \
    libswscale7 \
    libswresample4 \
    libyaml-cpp0.8 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create egress user and group
RUN groupadd -r rtc_egress && useradd -r -g rtc_egress -d /opt/rtc_egress -s /bin/bash rtc_egress

# Create necessary directories with proper permissions
RUN mkdir -p /opt/rtc_egress \
    /opt/rtc_egress/bin \
    /opt/rtc_egress/config \
    /var/log/rtc_egress \
    /recordings \
    /snapshots \
    /tmp/egress \
    && chown -R rtc_egress:rtc_egress /opt/rtc_egress /var/log/rtc_egress /recordings /snapshots /tmp/egress

# Set working directory
WORKDIR /opt/rtc_egress

# Copy ONLY stripped binaries and configs (NO source code, NO symbols)
COPY --from=builder --chown=rtc_egress:rtc_egress /build/bin ./bin
# Ensure all binaries are executable (defensive against permission loss in COPY)
RUN chmod +x ./bin/* || true
COPY --from=builder --chown=rtc_egress:rtc_egress /build/config ./config

# Copy Agora SDK shared libraries to system library path
COPY --from=builder /build/agora_sdk/*.so /usr/local/lib/
RUN ldconfig

# Copy entrypoint script
COPY --chown=rtc_egress:rtc_egress docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Switch to egress user
USER rtc_egress

# Create volume mount points for configuration and data
VOLUME ["/opt/rtc_egress/config", "/recordings", "/snapshots", "/var/log/rtc_egress"]

# Expose ports
EXPOSE 8080 8182 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8182/health || exit 1

# Use entrypoint script
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

# No CMD - entrypoint will auto-detect monolithic mode and start all 5 services
