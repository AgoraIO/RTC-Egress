# API Server - Debug Image (Full build environment with source code and symbols)
FROM golang:1.21-alpine AS builder

WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY cmd/api_server/ ./cmd/api_server/
COPY pkg/ ./pkg/

# Build the API server binary with debug symbols
RUN CGO_ENABLED=0 GOOS=linux go build -gcflags="all=-N -l" -o api_server ./cmd/api_server

FROM ubuntu:24.04

# Set timezone and avoid interactive prompts
ENV TZ=UTC
ENV DEBIAN_FRONTEND=noninteractive

# Install runtime and debug dependencies
RUN sed -i 's|http://archive.ubuntu.com|https://archive.ubuntu.com|g' /etc/apt/sources.list && \
    apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    gdb \
    strace \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /opt

# Copy the API server binary with debug symbols
COPY --from=builder /app/api_server ./bin/
# Ensure executable bit
RUN chmod +x ./bin/api_server && chmod 755 /opt /opt/bin || true

# Copy source code and config for debugging
COPY --from=builder /app/cmd/ ./cmd/
COPY --from=builder /app/pkg/ ./pkg/
COPY config/ ./config/

# Create non-root user
RUN groupadd -r rtc_egress && \
    useradd -r -g rtc_egress -s /bin/bash rtc_egress

# Create directories
RUN mkdir -p /opt/rtc_egress/config /var/log/api_server && \
    chown -R rtc_egress:rtc_egress /opt /var/log/api_server

USER rtc_egress

# Expose ports (dynamic from config)
EXPOSE 8091 8191

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8191/health || exit 1

# Default config directory for containers
ENV CONFIG_DIR=/opt/rtc_egress/config

# Default command
CMD ["/opt/bin/api_server"]
